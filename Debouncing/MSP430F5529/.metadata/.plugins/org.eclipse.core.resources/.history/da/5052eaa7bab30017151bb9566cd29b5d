#include <msp430.h>
volatile int Count = 0;

int main(void) {

    /*** Watchdog timer and clock Set-Up ***/
    WDTCTL = WDTPW + WDTHOLD;       // Stop watchdog timer

    /*** GPIO Set-Up ***/
    P1DIR |= BIT0;
    P4DIR |=  BIT6;       // P1.0 and P1.6 set as outputs
    P1OUT &= ~BIT0;             // P1.0 Low therefore Red LED off
    P4OUT |= BIT6;              // P1.6 High therefore Green LED on
    P2DIR &= ~BIT1;             // P2.0 set as input
    P2SEL |= BIT1;              // P1.2 set to primary peripheral Timer1_A

    /*** Timer1_A Set-Up ***/
    TA1CCTL0 |= CM_2 + CCIS_0 + CAP + CCIE; // Negative edge, Capture input select, Compare mode, Compare interrupt enable
    TA1CTL |= TASSEL_2 + TAIE + MC_3;       // SMCLK, Interrupt enable, Up/Down count

    _BIS_SR(LPM0_bits + GIE);                 // Enter LPM0 with interrupts enabled
}

    //Timer_A1 TACCR0 Interrupt Vector Handler Routine
    #pragma vector=TIMER1_A0_VECTOR
    __interrupt void Timer1A0(void)
    {
    P1OUT ^= BIT0; // Toggle Red LED
    Count++;
    }
